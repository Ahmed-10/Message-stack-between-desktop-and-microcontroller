
Serial_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000338  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000338  000003cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080008c  0080008c  000003f8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b5b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001c8  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012af  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000857  00000000  00000000  00002001  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000090c  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000430  00000000  00000000  00003164  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000042e  00000000  00000000  00003594  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009a4  00000000  00000000  000039c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000178  00000000  00000000  00004366  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_13>
  38:	0c 94 2b 01 	jmp	0x256	; 0x256 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 39       	cpi	r26, 0x95	; 149
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  8a:	0c 94 9a 01 	jmp	0x334	; 0x334 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ReceiveFunction>:
		}
		str[i] = '\0';
		reverse_str(str, i+1);
		StrTransmit(str);
	}
}
  92:	cf 93       	push	r28
  94:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_Interrupt_receive>
  98:	c8 2f       	mov	r28, r24
  9a:	81 e9       	ldi	r24, 0x91	; 145
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <StackFull>

static void ReceiveFunction(void){
	//write your code
	uint8_t temp;
	temp = UART_Interrupt_receive();
	if(StackFull(&s)){
  a2:	89 2b       	or	r24, r25
  a4:	39 f0       	breq	.+14     	; 0xb4 <ReceiveFunction+0x22>
		lcd_clr();
  a6:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clr>
		lcd_write_string((uint8_t*)"stack is full");
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_string>
  b2:	0b c0       	rjmp	.+22     	; 0xca <ReceiveFunction+0x38>
	}
	else{
		Push(temp, &s);
  b4:	61 e9       	ldi	r22, 0x91	; 145
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 b4 00 	call	0x168	; 0x168 <Push>
		lcd_clr();
  be:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clr>
		lcd_write_string((uint8_t*)"press the btn");
  c2:	8e e6       	ldi	r24, 0x6E	; 110
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_string>
	}
}
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <StrReceive_Asynch>:

void StrReceive_Asynch(void){
	/*Asynch_receive_str = str;*/
	UART_Interrupt_En(RX_C);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <UART_Interrupt_En>
	UART_callBack_receive(ReceiveFunction);
  d4:	89 e4       	ldi	r24, 0x49	; 73
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <UART_callBack_receive>
  dc:	08 95       	ret

000000de <lcd_write_instr>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	ef e9       	ldi	r30, 0x9F	; 159
  e0:	ff e0       	ldi	r31, 0x0F	; 15
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_write_instr+0x4>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_write_instr+0xa>
  e8:	00 00       	nop
	BCK_LIGHT_ON;
}

void lcd_write_instr(uint8_t instr){
	_delay_ms(2);//to any previous commands
	CLR_BIT(CTRL_PORT, RS_PIN);//deal with instruction register
  ea:	ad 98       	cbi	0x15, 5	; 21
	CLR_BIT(CTRL_PORT, RW_PIN);//write operation
  ec:	ae 98       	cbi	0x15, 6	; 21
	DATA_PORT = instr;//operation code
  ee:	88 bb       	out	0x18, r24	; 24
	SET_BIT(CTRL_PORT, EN_PIN);//logic 1 on the enable bit
  f0:	af 9a       	sbi	0x15, 7	; 21
	CLR_BIT(CTRL_PORT, EN_PIN);//latch the data to the instruction register on the falling edge	
  f2:	af 98       	cbi	0x15, 7	; 21
  f4:	08 95       	ret

000000f6 <lcd_init>:
}


void lcd_init(void){
	/*set the interfacing pins as outputs*/
	DATA_PORT_DIR = 0xff;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	87 bb       	out	0x17, r24	; 23
	SET_BIT(CTRL_PINS_DIR, RS_PIN);
  fa:	a5 9a       	sbi	0x14, 5	; 20
	SET_BIT(CTRL_PINS_DIR, RW_PIN);
  fc:	a6 9a       	sbi	0x14, 6	; 20
	SET_BIT(CTRL_PINS_DIR, EN_PIN);
  fe:	a7 9a       	sbi	0x14, 7	; 20
	/*clr lcd*/
	lcd_write_instr(0x01);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 6f 00 	call	0xde	; 0xde <lcd_write_instr>
	/*entry mood*/
	lcd_write_instr(0x06);
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 6f 00 	call	0xde	; 0xde <lcd_write_instr>
	/*display on*/
	lcd_write_instr(0x0c);
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	0e 94 6f 00 	call	0xde	; 0xde <lcd_write_instr>
	/*setup 8 bit data line*/
	lcd_write_instr(0x38);
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	0e 94 6f 00 	call	0xde	; 0xde <lcd_write_instr>
	/*setting back light pin as output*/
	BCK_LIGHT_INIT;
 118:	a4 9a       	sbi	0x14, 4	; 20
	BCK_LIGHT_ON;
 11a:	ac 9a       	sbi	0x15, 4	; 21
 11c:	08 95       	ret

0000011e <lcd_write_char>:
 11e:	ef e9       	ldi	r30, 0x9F	; 159
 120:	ff e0       	ldi	r31, 0x0F	; 15
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_write_char+0x4>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_write_char+0xa>
 128:	00 00       	nop
	CLR_BIT(CTRL_PORT, EN_PIN);//latch the data to the instruction register on the falling edge	
}

void lcd_write_char(uint8_t c){
	_delay_ms(2);//to any previous commands
	SET_BIT(CTRL_PORT, RS_PIN);//deal with data register
 12a:	ad 9a       	sbi	0x15, 5	; 21
	CLR_BIT(CTRL_PORT, RW_PIN);//write operation
 12c:	ae 98       	cbi	0x15, 6	; 21
	DATA_PORT = c;//operation code
 12e:	88 bb       	out	0x18, r24	; 24
	SET_BIT(CTRL_PORT, EN_PIN);//logic 1 on the enable bit
 130:	af 9a       	sbi	0x15, 7	; 21
	CLR_BIT(CTRL_PORT, EN_PIN);//latch the data to the instruction register on the falling edge
 132:	af 98       	cbi	0x15, 7	; 21
 134:	08 95       	ret

00000136 <lcd_clr>:
 136:	8f e9       	ldi	r24, 0x9F	; 159
 138:	9f e0       	ldi	r25, 0x0F	; 15
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_clr+0x4>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_clr+0xa>
 140:	00 00       	nop
}

void lcd_clr(void){
	_delay_ms(2);
	lcd_write_instr(0x01);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 6f 00 	call	0xde	; 0xde <lcd_write_instr>
 148:	08 95       	ret

0000014a <lcd_write_string>:
}

void lcd_write_string(uint8_t* arr){
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	while(*arr != 0){
 150:	88 81       	ld	r24, Y
 152:	88 23       	and	r24, r24
 154:	31 f0       	breq	.+12     	; 0x162 <lcd_write_string+0x18>
void lcd_clr(void){
	_delay_ms(2);
	lcd_write_instr(0x01);
}

void lcd_write_string(uint8_t* arr){
 156:	21 96       	adiw	r28, 0x01	; 1
	while(*arr != 0){
		lcd_write_char(*arr);
 158:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_write_char>
	_delay_ms(2);
	lcd_write_instr(0x01);
}

void lcd_write_string(uint8_t* arr){
	while(*arr != 0){
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_write_string+0xe>
		lcd_write_char(*arr);
		arr++;
	}
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <Push>:
 */ 

#include "stack.h"

void Push(StackEntry e, Stack* ps){
	ps->entry[ps->top++] = e;
 168:	fb 01       	movw	r30, r22
 16a:	90 81       	ld	r25, Z
 16c:	e9 0f       	add	r30, r25
 16e:	f1 1d       	adc	r31, r1
 170:	81 83       	std	Z+1, r24	; 0x01
 172:	9f 5f       	subi	r25, 0xFF	; 255
 174:	fb 01       	movw	r30, r22
 176:	90 83       	st	Z, r25
 178:	08 95       	ret

0000017a <Pop>:
}

void Pop(StackEntry* pe, Stack* ps){
	*pe = ps->entry[--ps->top];
 17a:	fb 01       	movw	r30, r22
 17c:	20 81       	ld	r18, Z
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	20 83       	st	Z, r18
 182:	e2 0f       	add	r30, r18
 184:	f1 1d       	adc	r31, r1
 186:	21 81       	ldd	r18, Z+1	; 0x01
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	08 95       	ret

0000018e <StackEmpty>:
}

int	StackEmpty(Stack* ps){
	return !(ps->top);
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	80 81       	ld	r24, Z
 196:	88 23       	and	r24, r24
 198:	11 f0       	breq	.+4      	; 0x19e <StackEmpty+0x10>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
}
 19e:	82 2f       	mov	r24, r18
 1a0:	93 2f       	mov	r25, r19
 1a2:	08 95       	ret

000001a4 <StackFull>:

int	StackFull(Stack* ps){
	return (ps->top >= MAXSTACK);
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	fc 01       	movw	r30, r24
 1aa:	80 81       	ld	r24, Z
 1ac:	83 30       	cpi	r24, 0x03	; 3
 1ae:	10 f4       	brcc	.+4      	; 0x1b4 <StackFull+0x10>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
}
 1b4:	82 2f       	mov	r24, r18
 1b6:	93 2f       	mov	r25, r19
 1b8:	08 95       	ret

000001ba <CreateStack>:

void CreateStack(Stack *ps){
	ps->top = 0;
 1ba:	fc 01       	movw	r30, r24
 1bc:	10 82       	st	Z, r1
 1be:	08 95       	ret

000001c0 <UART_Init>:
#include "UART.h"

/***************initialization***************/
void UART_Init(uint16_t ubrr){
		/*set the baud rate*/
		UCSRC &= ~(1 << URSEL);
 1c0:	20 b5       	in	r18, 0x20	; 32
 1c2:	2f 77       	andi	r18, 0x7F	; 127
 1c4:	20 bd       	out	0x20, r18	; 32
		UBRRH = (uint8_t) (ubrr >> 8);
 1c6:	90 bd       	out	0x20, r25	; 32
		UBRRL = (uint8_t) (ubrr);
 1c8:	89 b9       	out	0x09, r24	; 9
		UCSRC |= (1 << URSEL);
 1ca:	80 b5       	in	r24, 0x20	; 32
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	80 bd       	out	0x20, r24	; 32
		/*enable receiver and transimter*/
		UCSRB = (1 << RXEN) | (1 << TXEN);
 1d0:	88 e1       	ldi	r24, 0x18	; 24
 1d2:	8a b9       	out	0x0a, r24	; 10
		/*set frame format: 8 bit - no parity - one stop bits*/
		UCSRC |= (1<<USBS)|(3<<UCSZ0);
 1d4:	80 b5       	in	r24, 0x20	; 32
 1d6:	8e 60       	ori	r24, 0x0E	; 14
 1d8:	80 bd       	out	0x20, r24	; 32
 1da:	08 95       	ret

000001dc <UART_Interrupt_En>:
/***************interrupt functions***************/
static void (*ptrReceiveFunction)(void);
static void (*ptrTransmitFunction)(void); 

void UART_Interrupt_En(t_interrupt_type interr){
	switch (interr){
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	31 f0       	breq	.+12     	; 0x1ec <UART_Interrupt_En+0x10>
 1e0:	18 f0       	brcs	.+6      	; 0x1e8 <UART_Interrupt_En+0xc>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	31 f4       	brne	.+12     	; 0x1f2 <UART_Interrupt_En+0x16>
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <UART_Interrupt_En+0x14>
	case RX_C:
	UCSRB |= (1 << RXCIE);
 1e8:	57 9a       	sbi	0x0a, 7	; 10
		break;
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <UART_Interrupt_En+0x16>
	case TX_C:
	UCSRB |= (1 << TXCIE);
 1ec:	56 9a       	sbi	0x0a, 6	; 10
		break;
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <UART_Interrupt_En+0x16>
	case UDR_E:
	UCSRB |= (1 << UDRIE);
 1f0:	55 9a       	sbi	0x0a, 5	; 10
		break;
	}
	SREG |= (1 << 7);
 1f2:	8f b7       	in	r24, 0x3f	; 63
 1f4:	80 68       	ori	r24, 0x80	; 128
 1f6:	8f bf       	out	0x3f, r24	; 63
 1f8:	08 95       	ret

000001fa <UART_Interrupt_receive>:
void UART_Interrupt_transmit(uint8_t data){
	UDR = data;
}

uint8_t	UART_Interrupt_receive(void){
	return UDR;
 1fa:	8c b1       	in	r24, 0x0c	; 12
}
 1fc:	08 95       	ret

000001fe <UART_callBack_receive>:
/*Receive Setter*/
void UART_callBack_receive(void (*ptrFunc)(void)){
	ptrReceiveFunction = ptrFunc;
 1fe:	90 93 8d 00 	sts	0x008D, r25
 202:	80 93 8c 00 	sts	0x008C, r24
 206:	08 95       	ret

00000208 <__vector_13>:
void UART_callBack_transmit(void (*ptrFunc)(void)){
	ptrTransmitFunction = ptrFunc;
}

/***************ISR***************/
ISR(USART_RXC_vect){
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
	(*ptrReceiveFunction)();
 22a:	e0 91 8c 00 	lds	r30, 0x008C
 22e:	f0 91 8d 00 	lds	r31, 0x008D
 232:	09 95       	icall
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <__vector_14>:

ISR(USART_UDRE_vect){
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	5f 93       	push	r21
 268:	6f 93       	push	r22
 26a:	7f 93       	push	r23
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
 274:	ef 93       	push	r30
 276:	ff 93       	push	r31
	(*ptrTransmitFunction)();
 278:	e0 91 8e 00 	lds	r30, 0x008E
 27c:	f0 91 8f 00 	lds	r31, 0x008F
 280:	09 95       	icall
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <get_btn>:
}

uint8_t get_btn(void){
	uint8_t value = 0;
	static uint8_t flag = 0;
	if(!(PINA & 1)){
 2a4:	c8 99       	sbic	0x19, 0	; 25
 2a6:	10 c0       	rjmp	.+32     	; 0x2c8 <get_btn+0x24>
		if(flag == 0){
 2a8:	80 91 90 00 	lds	r24, 0x0090
 2ac:	81 11       	cpse	r24, r1
 2ae:	10 c0       	rjmp	.+32     	; 0x2d0 <get_btn+0x2c>
 2b0:	8f e1       	ldi	r24, 0x1F	; 31
 2b2:	9e e4       	ldi	r25, 0x4E	; 78
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <get_btn+0x10>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <get_btn+0x16>
 2ba:	00 00       	nop
			_delay_ms(10);
			if((!(PINA & 1)) == 1){
 2bc:	c8 99       	sbic	0x19, 0	; 25
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <get_btn+0x30>
				value = 1;
				flag = 1;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 90 00 	sts	0x0090, r24
 2c6:	08 95       	ret
			}
		}
	}
	else{
		flag = 0;
 2c8:	10 92 90 00 	sts	0x0090, r1
	DDRA  &= 0xFE;
	PORTA |= 0x01;
}

uint8_t get_btn(void){
	uint8_t value = 0;
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	08 95       	ret
 2d4:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		flag = 0;
	}
	return value;
 2d6:	08 95       	ret

000002d8 <main>:
uint8_t get_btn(void);

Stack s;

int main(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	1f 92       	push	r1
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t ch;
	CreateStack(&s);
 2e2:	81 e9       	ldi	r24, 0x91	; 145
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <CreateStack>
	lcd_init();
 2ea:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_init>
	UART_Init(MYUBRR);
 2ee:	83 e3       	ldi	r24, 0x33	; 51
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_Init>
	StrReceive_Asynch();
 2f6:	0e 94 67 00 	call	0xce	; 0xce <StrReceive_Asynch>
    while(1)
    {
		if(get_btn()){
 2fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <get_btn>
 2fe:	88 23       	and	r24, r24
 300:	e1 f3       	breq	.-8      	; 0x2fa <main+0x22>
			if(StackEmpty(&s) == 1){
 302:	81 e9       	ldi	r24, 0x91	; 145
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 c7 00 	call	0x18e	; 0x18e <StackEmpty>
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	39 f4       	brne	.+14     	; 0x31c <main+0x44>
				lcd_clr();
 30e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clr>
				lcd_write_string((uint8_t*)"stack is empty");
 312:	8c e7       	ldi	r24, 0x7C	; 124
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_write_string>
 31a:	ef cf       	rjmp	.-34     	; 0x2fa <main+0x22>
			}
			else{
				Pop(&ch, &s);
 31c:	61 e9       	ldi	r22, 0x91	; 145
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	ce 01       	movw	r24, r28
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	0e 94 bd 00 	call	0x17a	; 0x17a <Pop>
				lcd_clr();
 328:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clr>
				lcd_write_char(ch);
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_write_char>
 332:	e3 cf       	rjmp	.-58     	; 0x2fa <main+0x22>

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
